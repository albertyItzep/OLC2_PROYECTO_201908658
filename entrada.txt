while num != 0 {
num -= 1
guard i % 2 == 0 else {
i = i + 1
//continue
}
}

for i in 1...5 {
//print(i)
    num -= 1
    guard i % 2 == 0 else {
i = i + 1
//continue
}
}
for c in "hola" {
    //print(c)
    num -= 1
    guard i % 2 == 0 else {
i = i + 1
//continue
}
}
for letra in letras {
    //print(letra)
    letra = "cadena" 

    guard i % 2 == 0 else {
i = i + 1
//continue
}
}

//vector con valores
var vec1: [Int] = [10,20,30,40,50]
//vector vacío
var vec2: [Float] = []
//vector vacío
var vec3: [String] = [ ]
//imprime 0
//inserta 100 al final
vec1.append(100) //[10,20,30,40,50,100]
//inserciones en vacíos
vec2.append(1.0) // [1.0]
vec3.append("cadena") // ["cadena"]

//elimina la primera posición
vec1.remove( at: 0) //[20,30,40,50,100]
//elimina la última posición
vec1.remove(at: vec1.count - 1) //[20,30,40,50]
//se realiza una copia completa de vector
var copiaVec: [Int] = vec1
//Aceso a un elemento
let val: Int = vec1[3] // val = 50
//asignación con []
vec1[1] = vec1[0] //[20,20,40,50]
//vec1 = [20,20,40,50]
//copiaVec = [20,30,40,50]


var mtx1 : [[[[Int]]]] = [[1,2,3],[4,5,6],[7,8,9]]

var mtx2 : [[[Int]]] = [[[1,2,3],[4,5,6],[7,8,9]],
[[10,11,12],[13,14,15],[16,17,18]],
[[19,20,21],[22,23,24],[25,26,27]]]

var matrix : [[[Int]]] = [[[Int]]] (repeating: [[Int]] (repeating: [Int]
(repeating: 0, count:2), count:3), count:4)

var matrix0 : [[[String]]] = [[[String]]] (repeating: [[String]]
(repeating: [String] (repeating:"OLC2", count:2), count:1), count:3)

mtx1[1][1] = 10
mtx1[1][1] = tx1[100][100]

func func1 () -> Int {
return 1
}
func fn2() -> String {
return "cadena"
}

func we() {
return
}
// función inválida:
// ya se ha declarado una función llamada func previamente
func fufasnc () -> String {
return "valor"
}
// función inválida
// nombre inválido
func if() -> Float {
return 21.0
}
func valor() -> String {
// error: valor de retorno incompatible con el tipo de retorno
return 10
}
func invalida() {
// error no se esperan valor de regreso
return 1000
}

func suma( num1 x : Int, num2 y: Int) -> Int {
return x + y
}
//funcion resta
// Nombres externos: ninguno
// Nombres internos: x, y
func resta(_ x : Int, _ y: Int) -> Int {
return x - y
}
//función mul
// Nombres externos: x, y
// Nombres internos: x, y
func mul(x: Int, y: Int) -> Int {
return x * y
}
//funciones por referencia
// duplica el valor ingresado
func duplicar(_ x: inout Int){
x += x
}
// duplica los valores de un array
func duplicarA (_ array: inout [Int] ) {
var i = 0
while (i < array.count ) {
array[i] += array[i]
i += 1
}
}
func ejemplo( _ v: Verdura ) {
return
}
// función válida
//los nombres externos e internos son diferentes
func ejemplo2(verdura v: Verdura, v verdura: Verdura ) {
return
}
// función inválida
func ejemplo2e(verdura v: Verdura, verdura v: inout Verdura ) {
    return
}

suma(num1: numero1, num2: numero2)

resta(numero1, numero2)

mul(x: numero1, y: numero2)

duplicar(&numero1)

uplicarA(&array)

print("cadena1","cadena2") //mostraría: cadena1 cadena2

print("cadena1") // mostraría cadena1
print("cadena1 \n cadena2") // mostraría cadena1
// cadena2
print("valor", 10) // mostraría valor 10
print(nil) // imprime nil
print(true) // mostraría true
print(1.00001) //imprime 1.00001

var w = Int("10") // w obtiene el valor de 10
var x = ("10.001") //trunca el valor y asigna el valor de 10
var x1 = (10.999999) //trunca el valor y asigna el valor de 10
var y = Int("Q10.00") //error no pude convertirse a Int devuelve nil


var w = Float("10") // w obtiene el valor de 10.00
var x = Float("10.001") //x adopta el valor de 10.001
var y = Float("Q10.00")

print( String(10) + iota(3.5)) //imprime 103.5000
print( String( true )) //true
cadena = String(true) + "->" + String(3.504) //
print(cadena) // imprime true->3.50400000

struct Persona{
    var Nombre: String
    var edad = 0
}
// struct con funciones
struct Avion {
    var pasajeros = 0
    var velocidad = 100
    var nombre: String
    var piloto: Persona
    // metodo dentro de struct
    mutating func frenar(){
        print("Frenando")
        //al ser mutable sí afecta al struct
        self.velocidad = 0
    }
let letras = ["O", "L", "C", "2"]
// funcion inmutable
    func mostrarVelocidad(){
        print("Velocidad",self.velocidad)
    }
}

// arreglar los ingresos como at.dat.mesh
//if
//switch
// ver vectores no se puede linea 198
//comenzar con logica
//hacer fisica
//didactica
//bases
